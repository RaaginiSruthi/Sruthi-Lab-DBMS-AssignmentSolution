CREATE DATABASE ECOMMERCE;
USE ECOMMERCE;

# 1 ------------------------------------------------------------------------------------
# create tables for supplier,customer,category,product,supplier_pricing,order,rating

CREATE TABLE SUPPLIER( 
SUPP_ID INT PRIMARY KEY,
SUPP_NAME varchar(50) NOT NULL,
SUPP_CITY varchar(50) NOT NULL,
SUPP_PHONE varchar(50) NOT NULL
);

CREATE TABLE CUSTOMER( 
CUS_ID INT PRIMARY KEY,
CUS_NAME VARCHAR(20) NOT NULL,
CUS_PHONE VARCHAR(10) NOT NULL,
CUS_CITY VARCHAR(30) NOT NULL,
CUS_GENDER CHAR
);

CREATE TABLE CATEGORY( 
CAT_ID INT PRIMARY KEY,
CAT_NAME  VARCHAR(20) NOT NULL
);

CREATE TABLE PRODUCT( 
PRO_ID  INT PRIMARY KEY,
PRO_NAME VARCHAR(20) NOT NULL DEFAULT "Dummy",
PRO_DESC VARCHAR(60),
CAT_ID INT ,
FOREIGN KEY (CAT_ID) REFERENCES CATEGORY(CAT_ID)
);

CREATE TABLE SUPPLIER_PRICING( 
PRICING_ID INT PRIMARY KEY,
PRO_ID INT,
FOREIGN KEY (PRO_ID) REFERENCES PRODUCT(PRO_ID),
SUPP_ID INT,
FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER(SUPP_ID),
SUPP_PRICE INT DEFAULT 0
);

CREATE TABLE ORDERS( 
ORD_ID  INT PRIMARY KEY,
ORD_AMOUNT INT NOT NULL,
ORD_DATE  DATE NOT NULL,
CUS_ID INT,
FOREIGN KEY (CUS_ID ) REFERENCES CUSTOMER(CUS_ID ),
PRICING_ID INT,
FOREIGN KEY (PRICING_ID) REFERENCES SUPPLIER_PRICING(PRICING_ID)
);

CREATE TABLE RATING( 
RAT_ID INT PRIMARY KEY,
ORD_ID INT,
FOREIGN KEY (ORD_ID) REFERENCES ORDERS(ORD_ID),
RAT_RATSTARS INT NOT NULL
);

# 2 --------------------------------------------------------------------------------------------
# INSERTING DATA

#SUPPLIER table
INSERT INTO SUPPLIER (SUPP_ID, SUPP_NAME,SUPP_CITY,SUPP_PHONE) VALUES (1,'Rajesh Retails','Delhi','1234567890');
INSERT INTO SUPPLIER (SUPP_ID, SUPP_NAME,SUPP_CITY,SUPP_PHONE) VALUES (2,'Appario Ltd.','Mumbai','2589631470');
INSERT INTO SUPPLIER (SUPP_ID, SUPP_NAME,SUPP_CITY,SUPP_PHONE) VALUES (3,'Knome products','Banglore','9785462315');
INSERT INTO SUPPLIER (SUPP_ID, SUPP_NAME,SUPP_CITY,SUPP_PHONE) VALUES (4,'Bansal Retails','Kochi','8975463285');
INSERT INTO SUPPLIER (SUPP_ID, SUPP_NAME,SUPP_CITY,SUPP_PHONE) VALUES (5,'Mittal Ltd.','Lucknow','7898456532');

#Customer Table
INSERT INTO CUSTOMER(CUS_ID,CUS_NAME,CUS_PHONE,CUS_CITY,CUS_GENDER) VALUES(1,'AAKASH','9999999999','DELHI','M');
INSERT INTO CUSTOMER(CUS_ID,CUS_NAME,CUS_PHONE,CUS_CITY,CUS_GENDER) VALUES(2,'AMAN','9785463215','NOIDA','M');
INSERT INTO CUSTOMER(CUS_ID,CUS_NAME,CUS_PHONE,CUS_CITY,CUS_GENDER) VALUES(3,'NEHA','9999999999','MUMBAI','F');
INSERT INTO CUSTOMER(CUS_ID,CUS_NAME,CUS_PHONE,CUS_CITY,CUS_GENDER) VALUES(4,'MEGHA','9994562399','KOLKAT','F');
INSERT INTO CUSTOMER(CUS_ID,CUS_NAME,CUS_PHONE,CUS_CITY,CUS_GENDER) VALUES(5,'PULKIT','7895999999','LUCKNOW','M');

#Category Table
INSERT INTO CATEGORY VALUES(1,'BOOKS');
INSERT INTO CATEGORY VALUES(2,'GAMES');
INSERT INTO CATEGORY VALUES(3,'GROCERIES');
INSERT INTO CATEGORY VALUES(4,'ELECTRONICS');
INSERT INTO CATEGORY VALUES(5,'CLOTHES');

#Product Table
INSERT INTO PRODUCT VALUES(1,'GTA V','Windows 7 and above with i5 processor and 8GB RAM', 2);
INSERT INTO PRODUCT VALUES(2,'TSHIRT','SIZE-L with Black, Blue and White variations', 5);
INSERT INTO PRODUCT VALUES(3,'ROG LAPTOP','SWindows 10 with 15inch screen, i7 processor, 1TB SSD', 4);
INSERT INTO PRODUCT VALUES(4,'OATS','Highly Nutritious from Nestle', 3);
INSERT INTO PRODUCT VALUES(5,'HARRY POTTER','Best Collection of all time by J.K Rowling', 1);
INSERT INTO PRODUCT VALUES(6,'MILK','1L Toned MIlk', 3);
INSERT INTO PRODUCT VALUES(7,'Boat Earphones','1.5Meter long Dolby Atmos', 4);
INSERT INTO PRODUCT VALUES(8,'Jeans','Stretchable Denim Jeans with various sizes and color', 5);
INSERT INTO PRODUCT VALUES(9,'Project IGI','compatible with windows 7 and above', 2);
INSERT INTO PRODUCT VALUES(10,'Hoodie','Black GUCCI for 13 yrs and above', 5);
INSERT INTO PRODUCT VALUES(11,'Rich Dad Poor Dad ','Written by RObert Kiyosaki', 1);
INSERT INTO PRODUCT VALUES(12,'Train Your Brain','By Shireen Stephen', 1);

#Supplier_pricing Table
INSERT INTO SUPPLIER_PRICING VALUES(1, 1, 2, 1500);
INSERT INTO SUPPLIER_PRICING VALUES(2, 3, 5, 30000);
INSERT INTO SUPPLIER_PRICING VALUES(3, 5, 1, 3000);
INSERT INTO SUPPLIER_PRICING VALUES(4, 2, 3, 2500);
INSERT INTO SUPPLIER_PRICING VALUES(5, 4, 1, 1000);

#--------------------------------------------------------------------
#Orders Table --MODIFIED SOME VALUES WHILE INSERTING AS SUPPLIER_PRICING HAS PRICING_ID ONLY TILL 5
INSERT INTO ORDERS VALUES(101, 1500, '2021-10-06', 2, 1);
INSERT INTO ORDERS VALUES(102, 1000, '2021-10-12', 3, 5);
INSERT INTO ORDERS VALUES(103, 30000, '2021-09-16', 5, 2);
INSERT INTO ORDERS VALUES(104, 1500, '2021-10-05', 1, 1);
INSERT INTO ORDERS VALUES(105, 3000, '2021-08-16', 4, 3);
INSERT INTO ORDERS VALUES(106, 1450, '2021-08-18', 1, 1);
INSERT INTO ORDERS VALUES(107, 789, '2021-09-01', 3, 2);
INSERT INTO ORDERS VALUES(108, 780, '2021-09-07', 5, 3);
INSERT INTO ORDERS VALUES(109, 3000, '2021-00-10', 5, 4);
INSERT INTO ORDERS VALUES(110, 2500, '2021-09-10', 2, 4);
INSERT INTO ORDERS VALUES(111, 1000, '2021-09-15', 4, 5);
INSERT INTO ORDERS VALUES(112, 789, '2021-09-16', 4, 3);
INSERT INTO ORDERS VALUES(113, 31000, '2021-09-16', 1, 4);
INSERT INTO ORDERS VALUES(114, 1000, '2021-09-16', 3, 5);
INSERT INTO ORDERS VALUES(115, 3000, '2021-09-16', 5, 3);
INSERT INTO ORDERS VALUES(116, 99, '2021-09-17', 2, 1);

#Rating table
INSERT INTO RATING VALUES(1, 101, 4);
INSERT INTO RATING VALUES(2, 102, 3);
INSERT INTO RATING VALUES(3, 103, 1);
INSERT INTO RATING VALUES(4, 104, 2);
INSERT INTO RATING VALUES(5, 105, 4);
INSERT INTO RATING VALUES(6, 106, 3);
INSERT INTO RATING VALUES(7, 107, 4);
INSERT INTO RATING VALUES(8, 108, 4);
INSERT INTO RATING VALUES(9, 109, 3);
INSERT INTO RATING VALUES(10, 110, 5);
INSERT INTO RATING VALUES(11, 111, 3);
INSERT INTO RATING VALUES(12, 112, 4);
INSERT INTO RATING VALUES(13, 113, 2);
INSERT INTO RATING VALUES(14, 114, 1);
INSERT INTO RATING VALUES(15, 115, 1);
INSERT INTO RATING VALUES(16, 116, 0);

# 3 ------------------------------------------------------------------------------------
# Display the total number of customers based on gender who have placed orders of worth at least Rs.3000

SELECT C.CUS_GENDER, COUNT(C.CUS_GENDER) FROM CUSTOMER AS C JOIN ORDERS AS O
ON C.CUS_ID = O.CUS_ID AND O.ORD_AMOUNT >=3000 GROUP BY C.CUS_GENDER;

# 4 -----------------------------------------------------------------------------------
#Display all the orders along with product name ordered by a customer having Customer_Id=2

SELECT O.*, P.PRO_NAME 
FROM ORDERS O JOIN SUPPLIER_PRICING S 
ON O.PRICING_ID = S.PRICING_ID 
JOIN PRODUCT P ON S.PRO_ID = P.PRO_ID
WHERE O.CUS_ID = 2 ;

# 5 -------------------------------------------------------------------------------------
# Display the Supplier details who can supply more than one product.

SELECT * FROM SUPPLIER WHERE SUPP_ID IN (SELECT sUPP_ID FROM
SUPPLIER_PRICING GROUP BY SUPP_ID HAVING COUNT(SUPP_ID)>1);

# 6 ------------------------------------------------------------------------------------
# Find the least expensive product from each category and print the table with category id, name, product name and price of the product

SELECT T2.CATEGORY_ID, CAT_NAME AS NAME, T2.PRO_NAME AS PRODUCT_NAME, T2.PRICE FROM CATEGORY INNER JOIN 
(SELECT T1.PRICE AS PRICE, PRO_NAME, CAT_ID AS CATEGORYID FROM PRODUCT JOIN 
(SELECT PRO_ID AS ID, SUPP_PRICE AS PRICE
FROM
SUPPLIER_PRICING GROUP BY PRO_ID HAVING MIN(SUPP_PRICE)) AS T1
ON T1.ID = PRODUCT.PRO_ID ) AS T2
ON T2.CATEGORYID = CATEGORY.CAT_ID;

# 7 ------------------------------------------------------------------------------------
#Display the Id and Name of the Product ordered after “2021-10-05”

SELECT P.PRO_ID, P.PRO_NAME 
FROM ORDERS O JOIN SUPPLIER_PRICING S 
ON O.PRICING_ID = S.PRICING_ID 
JOIN PRODUCT P ON S.PRO_ID = P.PRO_ID
AND O.ORD_DATE>  '2021-10-05';

# 8 ---------------------------------------------------------------------------------
# Display customer name and gender whose names start or end with character 'A'.
 
 SELECT CUS_NAME FROM CUSTOMER WHERE CUS_NAME LIKE 'A%' OR CUS_NAME LIKE '%A';
 
 
# 9  ---------------------------------------------------------------------------------
# Create a stored procedure to display supplier id, name, rating and Type_of_Service. For Type_of_Service, If rating =5, print “Excellent
# Service”,If rating >4 print “Good Service”, If rating >2 print “Average Service” else print “Poor Service”.

DELIMITER &&
CREATE PROCEDURE PROC()
BEGIN
SELECT REPORT.SUPP_ID, REPORT.SUPP_NAME,REPORT.AVERAGE,
CASE
WHEN REPORT.AVERAGE > 5 THEN 'Excellent Service'
WHEN REPORT.AVERAGE > 4 THEN 'Good Service'
WHEN REPORT.AVERAGE > 2 THEN 'Average Service'
ELSE 'Poor Service'
END AS TYPE_OF_SERVICE FROM 
(SELECT FINAL.SUPP_ID, SUPPLIER.SUPP_NAME, FINAL.AVERAGE FROM
(SELECT TEST2.SUPP_ID, SUM(TEST2.RAT_RATSTARS)/COUNT(TEST2.RAT_RATSTARS) AS AVERAGE FROM
(SELECT SUPPLIER_PRICING.SUPP_ID, TEST.ORD_ID, TEST. RAT_RATSTARS FROM SUPPLIER_PRICING INNER JOIN
(SELECT ORDERS.PRICING_ID, RATING.ORD_ID, RATING.RAT_RATSTARS 
FROM ORDERS INNER JOIN RATING ON RATING.ORD_ID = ORDERS.ORD_ID
) AS TEST ON TEST.PRICING_ID = SUPPLIER_PRICING.PRICING_ID)
AS TEST2 GROUP BY SUPPLIER_PRICING.SUPP_ID)
AS FINAL INNER JOIN SUPPLIER WHERE FINAL.SUPP_ID = SUPPLIER.SUPP_ID) AS REPORT;
END &&
DELIMITER ;

CALL PROC();

